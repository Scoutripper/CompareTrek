// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  customTours   CustomTour[]
  groupBookings GroupBooking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        String   @id @default(cuid())
  type      String   // 'trek' or 'location'
  itemId    String   // trek slug or location slug
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([type, itemId])
}

model CustomTour {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String
  destination   String
  groupSize     Int
  startDate     DateTime
  duration      Int
  budget        Int
  accommodation String
  activities    String[]
  requirements  String?
  status        String   @default("pending") // pending, approved, rejected
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?

  @@index([status])
}

model GroupBooking {
  id                  String   @id @default(cuid())
  organizerName       String
  organizerEmail      String
  organizerPhone      String
  organizationType    String
  groupType          String
  groupSize          Int
  preferredDestination String
  preferredDate      DateTime
  duration           Int
  budget             Int
  requirements       String?
  status             String   @default("pending")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User?    @relation(fields: [userId], references: [id])
  userId             String?
} 